<div class="post-topheader custom-tangshangwen pt0" style="box-sizing: border-box; padding: 15px 0px 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px;"><div class="mb20" style="box-sizing: border-box; margin-bottom: 20px !important;"><div class="block-for-right-border" style="box-sizing: border-box;"><div class="row" style="box-sizing: border-box; margin-left: -15px; margin-right: -15px;"><div class="col-md-12 col-sm-12 col-xs-12" style="box-sizing: border-box; position: relative; min-height: 1px; padding-left: 15px; padding-right: 15px; float: left; width: 855px;"><div class="post-topheader__info" data-username="HackerShell" data-userslug="hackershell" data-useravatar="https://cdn.segmentfault.com/v-5db16590/global/img/user-64.png" style="box-sizing: border-box; color: rgb(153, 153, 153); margin-bottom: -5px; margin-left: 0px !important;"><h1 class="h1 post-topheader__info--title" id="articleTitle" data-id="1190000003777237" style="box-sizing: border-box; font-size: 30px; margin-top: 15px; margin-bottom: 20px; font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: 500; line-height: 42px; color: inherit;"><a href="https://segmentfault.com/a/1190000003777237" style="box-sizing: border-box; background: transparent; color: rgb(51, 51, 51); outline: 0px;">[YARN] Yarn下Mapreduce的内存参数理解</a></h1><div class="content__tech hidden-xs" style="box-sizing: border-box;"><a href="https://segmentfault.com/a/1190000003777237" class="blog-type-common blog-type-0-before" target="_blank" data-content="
                                                                                        翻译自 
                                                                                        " style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); outline: 0px;"></a><ul class="taglist--inline inline-block article__title--tag mr10" style="box-sizing: border-box; display: inline-block; font-size: 0px; margin-right: 10px !important;"><li class="tagPopup mb5" style="box-sizing: border-box; font-size: 13px; display: inline-block; margin-right: 5px; margin-bottom: 5px !important;"><a class="tag" href="https://segmentfault.com/t/java/blogs" data-toggle="popover" data-img="https://avatar-static.segmentfault.com/512/342/51234253-1040000000089449_big64" data-placement="top" data-original-title="java" data-id="1040000000089449" style="box-sizing: border-box; background: rgba(1, 126, 102, 0.08); color: rgb(1, 126, 102); outline: 0px; display: inline-block; padding: 0px 6px; height: 22px; line-height: 22px; text-align: center;"><img src="https://avatar-static.segmentfault.com/868/271/868271510-54cb382abb7a1_small" style="box-sizing: border-box; vertical-align: middle; width: 16px; height: 16px; margin-right: 5px; margin-top: -1px;">&nbsp;java</a></li>&nbsp;<li class="tagPopup mb5" style="box-sizing: border-box; font-size: 13px; display: inline-block; margin-right: 5px; margin-bottom: 5px !important;"><a class="tag" href="https://segmentfault.com/t/yarn/blogs" data-toggle="popover" data-img="https://avatar-static.segmentfault.com/554/790/554790735-57ff2cf64b4f8_big64" data-placement="top" data-original-title="yarn" data-id="1040000000583426" style="box-sizing: border-box; background: rgba(1, 126, 102, 0.08); color: rgb(1, 126, 102); outline: 0px; display: inline-block; padding: 0px 6px; height: 22px; line-height: 22px; text-align: center;">yarn</a></li>&nbsp;<li class="tagPopup mb5" style="box-sizing: border-box; font-size: 13px; display: inline-block; margin-bottom: 5px !important;"><a class="tag" href="https://segmentfault.com/t/hadoop2.0/blogs" data-toggle="popover" data-img="" data-placement="top" data-original-title="hadoop2.0" data-id="1040000000354257" style="box-sizing: border-box; background: rgba(1, 126, 102, 0.08); color: rgb(1, 126, 102); outline: 0px; display: inline-block; padding: 0px 6px; height: 22px; line-height: 22px; text-align: center;">hadoop2.0</a></li></ul>&nbsp;<span style="box-sizing: border-box;">10.1k 次阅读 &nbsp;·&nbsp; 读完需要 15 分钟</span></div></div></div></div></div></div></div><div class="visible-lg" style="box-sizing: border-box; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px;"><div class="side-widget" style="box-sizing: border-box; display: flex; position: fixed; flex-direction: column; margin-left: -55px; margin-top: -100px; font-size: 20px; width: 40px; z-index: 1000;"><div class="stream__item-zan btn btn-default mt0 mb15 ml0 mr0 pt0 pb0 pl0 pr0 " id="side-widget-votes-btn" style="box-sizing: border-box; display: inline-block; margin: 15px 15px 15px 10px; text-align: center; vertical-align: middle; cursor: pointer; background-image: none; border: 1px solid rgb(204, 204, 204); white-space: nowrap; font-size: 14px; line-height: 1.42858; border-radius: 4px; user-select: none; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 1px; float: left; width: 40px; height: 46px; padding: 0px !important;"><span class="stream__item-zan-icon" style="box-sizing: border-box; height: 16px; width: 38px; background: url(&quot;../../global/img/vote-bg.svg&quot;) -1px -1px / auto 56px no-repeat transparent; display: block; color: rgb(33, 33, 33);"></span><span class="stream__item-zan-number" id="side-widget-votes-num" style="box-sizing: border-box; font-size: 16px; line-height: 1.6; display: block; color: rgb(33, 33, 33);">0</span></div><span class="fa fa-bookmark item " id="side-widget-bookmarks-btn" style="box-sizing: border-box; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 18px; line-height: 1; font-family: FontAwesome; text-rendering: auto; -webkit-font-smoothing: antialiased; padding: 5px 10px; cursor: pointer; text-align: center; color: rgb(204, 204, 204);"></span><span class="fa fa-weibo item" style="box-sizing: border-box; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 18px; line-height: 1; font-family: FontAwesome; text-rendering: auto; -webkit-font-smoothing: antialiased; padding: 5px 10px; cursor: pointer; text-align: center; color: rgb(204, 204, 204);"></span><span class="fa fa-weixin item" data-toggle="popover" data-placement="right" data-original-title="" title="" style="box-sizing: border-box; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 18px; line-height: 1; font-family: FontAwesome; text-rendering: auto; -webkit-font-smoothing: antialiased; padding: 5px 10px; cursor: pointer; text-align: center; color: rgb(204, 204, 204);"></span><span class="fa fa-twitter item" style="box-sizing: border-box; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 18px; line-height: 1; font-family: FontAwesome; text-rendering: auto; -webkit-font-smoothing: antialiased; padding: 5px 10px; cursor: pointer; text-align: center; color: rgb(204, 204, 204);"></span><span class="fa fa-facebook item" style="box-sizing: border-box; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 18px; line-height: 1; font-family: FontAwesome; text-rendering: auto; -webkit-font-smoothing: antialiased; padding: 5px 10px; cursor: pointer; text-align: center; color: rgb(204, 204, 204);"></span><span class="fa fa-arrow-up item" style="box-sizing: border-box; display: inline-block; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 18px; line-height: 1; font-family: FontAwesome; text-rendering: auto; -webkit-font-smoothing: antialiased; padding: 5px 10px; cursor: pointer; text-align: center; color: rgb(204, 204, 204);"></span></div></div><div class="article fmt article__content" data-id="1190000003777237" data-license="cc" style="box-sizing: border-box; line-height: 1.8; overflow-wrap: break-word; margin-top: 60px; font-size: 15px; font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; color: rgb(51, 51, 51);"><p style="box-sizing: border-box; margin-bottom: 1.5em;">博客原文：</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><a href="http://hackershell.cn/?p=680" rel="nofollow noreferrer" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); outline: 0px; border-bottom: 1px solid rgba(0, 154, 97, 0.25); padding-bottom: 1px;">hackershell</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">这篇文章算是给自己重新缕清MR下内存参数的含义</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">Container是什么？</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">Container就是一个yarn的java进程，在Mapreduce中的AM，MapTask，ReduceTask都作为Container在Yarn的框架上执行，你可以在RM的网页上看到Container的状态</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">基础</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">Yarn的ResourceManger（简称RM）通过逻辑上的队列分配内存，CPU等资源给application，默认情况下RM允许最大AM申请Container资源为8192MB("<strong style="box-sizing: border-box;">yarn.scheduler.maximum-allocation-mb</strong>")，默认情况下的最小分配资源为1024M("<strong style="box-sizing: border-box;">yarn.scheduler.minimum-allocation-mb</strong>")，AM只能以增量（"<strong style="box-sizing: border-box;">yarn.scheduler.minimum-allocation-mb</strong>"）和不会超过("<strong style="box-sizing: border-box;">yarn.scheduler.maximum-allocation-mb</strong>")的值去向RM申请资源，AM负责将("<strong style="box-sizing: border-box;">mapreduce.map.memory.mb</strong>")和("<strong style="box-sizing: border-box;">mapreduce.reduce.memory.mb</strong>")的值规整到能被("<strong style="box-sizing: border-box;">yarn.scheduler.minimum-allocation-mb</strong>")整除，RM会拒绝申请内存超过8192MB和不能被1024MB整除的资源请求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">相关参数</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">YARN</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em;"><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">yarn.scheduler.minimum-allocation-mb</p></li><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">yarn.scheduler.maximum-allocation-mb</p></li><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">yarn.nodemanager.vmem-pmem-ratio</p></li><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">yarn.nodemanager.resource.memory.mb</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">MapReduce</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">Map Memory</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em;"><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">mapreduce.map.java.opts</p></li><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">mapreduce.map.memory.mb</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">Reduce Memory</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em;"><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">mapreduce.reduce.java.opts</p></li><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">mapreduce.reduce.memory.mb</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><span class="img-wrap" style="box-sizing: border-box; display: block; text-align: center;"><img referrerpolicy="no-referrer" data-src="/img/bVp0ND" src="https://segmentfault.com/img/bVp0ND" alt="Copy_of_Yarn_mem_params.jpg" title="Copy_of_Yarn_mem_params.jpg" style="box-sizing: border-box; border-width: initial; border-style: none; vertical-align: middle; max-width: 100%; padding: 3px; cursor: pointer; display: inline; position: static !important;"></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">从上面的图可以看出map，reduce，AM container的JVM，“JVM”矩形代表服务进程，“Max heap”，“Max virtual”矩形代表NodeManager对JVM进程的最大内存和虚拟内存的限制。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">以map container内存分配("<strong style="box-sizing: border-box;">mapreduce.map.memory.mb</strong>")设置为1536为例，AM将会为container向RM请求2048mb的内存资源，因为最小分配单位("<strong style="box-sizing: border-box;">yarn.scheduler.minimum-allocation-mb</strong>")被设置为1024，这是一种逻辑上的分配，这个值被NodeManager用来监控改进程内存资源的使用率，如果map Task堆的使用率超过了2048MB，NM将会把这个task给杀掉，JVM进程堆的大小被设置为1024("<strong style="box-sizing: border-box;">mapreduce.map.java.opts=-Xmx1024m</strong>")适合在逻辑分配为2048MB中，同样reduce container("<strong style="box-sizing: border-box;">mapreduce.reduce.memory.mb</strong>")设置为3072也是.</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">当一个mapreduce job完成时，你将会看到一系列的计数器被打印出来，下面的三个计数器展示了多少物理内存和虚拟内存被分配</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">Physical memory (bytes) snapshot=21850116096<br style="box-sizing: border-box;">Virtual memory (bytes) snapshot=40047247360<br style="box-sizing: border-box;">Total committed heap usage (bytes)=22630105088</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">虚拟内存</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">默认的("<strong style="box-sizing: border-box;">yarn.nodemanager.vmem-pmem-ratio</strong>")设置为2.1，意味则map container或者reduce container分配的虚拟内存超过2.1倍的("<strong style="box-sizing: border-box;">mapreduce.reduce.memory.mb</strong>")或("<strong style="box-sizing: border-box;">mapreduce.map.memory.mb</strong>")就会被NM给KILL掉，如果 ("mapreduce.map.memory.mb") 被设置为1536那么总的虚拟内存为2.1*1536=3225.6MB</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">当container的内存超出要求的，log将会打印一下信息</p><pre class="hljs css" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: inherit; overflow-wrap: normal;"><span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">Current</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">usage</span>: 2<span class="hljs-selector-class" style="box-sizing: border-box;">.1gb</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">of</span> 2<span class="hljs-selector-class" style="box-sizing: border-box;">.0gb</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">physical</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">memory</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">used</span>; 1<span class="hljs-selector-class" style="box-sizing: border-box;">.6gb</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">of</span> 3<span class="hljs-selector-class" style="box-sizing: border-box;">.15gb</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">virtual</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">memory</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">used</span>. <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">Killing</span> <span class="hljs-selector-tag" style="box-sizing: border-box; font-weight: bold;">container</span>.

</code></pre><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">mapreduce.map.java.opts和mapreduce.map.memory.mb</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">大概了解完以上的参数之后，mapreduce.map.java.opts和mapreduce.map.memory.mb参数之间，有什么联系呢？</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">通过上面的分析，我们知道如果一个yarn的container超除了heap设置的大小，这个task将会失败，我们可以根据哪种类型的container失败去相应增大mapreduce.{map|reduce}.memory.mb去解决问题。 但同时带来的问题是集群并行跑的container的数量少了，所以适当的调整内存参数对集群的利用率的提升尤为重要。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">因为在yarn container这种模式下，JVM进程跑在container中，mapreduce.{map|reduce}.java.opts能够通过Xmx设置JVM最大的heap的使用，一般设置为0.75倍的memory.mb，因为需要为java code，非JVM内存使用等预留些空间</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">补充一下</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">对于FairScheduler来说（其他我也没看），存在着一个增量参数</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">/** Increment request grant-able by the RM scheduler.</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em;"><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">These properties are looked up in the yarn-site.xml */<br style="box-sizing: border-box;">public static final String RM_SCHEDULER_INCREMENT_ALLOCATION_MB =<br style="box-sizing: border-box;">YarnConfiguration.YARN_PREFIX + "scheduler.increment-allocation-mb";<br style="box-sizing: border-box;">public static final int DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB = 1024;</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">对于线上2560MB最小分配内存，客户端的内存为2048，incrementMemory为1024，通过其计算算法得出值，demo如下</p><pre class="hljs" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: initial; overflow-wrap: normal; word-break: break-word;">/**</code></pre><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em;"><li style="box-sizing: border-box; margin-top: 0.3em; margin-bottom: 0.3em;"><p style="box-sizing: border-box;">Created by shangwen on 15-9-14.<br style="box-sizing: border-box;">*/</p><pre class="hljs groovy" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: initial; overflow-wrap: normal; word-break: break-word;"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">public</span>&nbsp;<span class="hljs-class" style="box-sizing: border-box;"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">class</span>&nbsp;<span class="hljs-title" style="box-sizing: border-box; color: rgb(68, 85, 136); font-weight: bold;">TestCeil</span>&nbsp;{</span></code></pre><p style="box-sizing: border-box;">public static void main(String[] args) {</p><pre class="hljs fortran" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: inherit; overflow-wrap: normal;">   <span class="hljs-built_in" style="box-sizing: border-box; color: rgb(0, 134, 179);">int</span> clientMemoryReq = <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">2048</span>;
   <span class="hljs-built_in" style="box-sizing: border-box; color: rgb(0, 134, 179);">int</span> minAllowMermory = <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">2560</span>;
   <span class="hljs-built_in" style="box-sizing: border-box; color: rgb(0, 134, 179);">int</span> incrementResource = <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">1024</span>;
   System.<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">out</span>.println(roundUp(Math.<span class="hljs-built_in" style="box-sizing: border-box; color: rgb(0, 134, 179);">max</span>(clientMemoryReq,minAllowMermory),incrementResource));
   // output <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">3072</span></code></pre><p style="box-sizing: border-box;">}</p><p style="box-sizing: border-box;">public static int divideAndCeil(int a, int b) {</p><pre class="hljs kotlin" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: inherit; overflow-wrap: normal;">   <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">if</span> (b == <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">0</span>) {
       <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">return</span> <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">0</span>;
   }
   <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">return</span> (a + (b - <span class="hljs-number" style="box-sizing: border-box; color: rgb(0, 128, 128);">1</span>)) / b;</code></pre><p style="box-sizing: border-box;">}</p><p style="box-sizing: border-box;">public static int roundUp(int a, int b) {</p><pre class="hljs kotlin" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: inherit; overflow-wrap: normal;">   System.<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">out</span>.println(<span class="hljs-string" style="box-sizing: border-box; color: rgb(221, 17, 68);">"divideAndCeil:"</span> + divideAndCeil(a, b));
   <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">return</span> divideAndCeil(a, b) * b;</code></pre><p style="box-sizing: border-box;">}</p><pre class="hljs" style="box-sizing: border-box; overflow: auto; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 0.93em; padding: 1em; margin-bottom: 1.5em; line-height: 1.45; word-break: break-all; overflow-wrap: break-word; background: url(&quot;../img/blueprint.png&quot;) 0% 0% / 30px, 0% 0% / 30px rgb(246, 246, 246); border: none; border-radius: 4px; max-height: 35em; position: relative;"><code style="box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, Consolas, Menlo, Monaco, &quot;Courier New&quot;, monospace; font-size: 1em; padding: 0px; color: inherit; background: none; border-radius: 0px; white-space: inherit; overflow-wrap: normal;">}

</code></pre></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">得出的结果为3072MB，即对于map来说，则会分配3G内存，即使你在客户端写的是2G，所以你可以看到以下日志：</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">Container [pid=35691,containerID=container_1441194300243_383809_01_000181] is running beyond physical memory limits. Current usage: 3.0 GB of 3 GB physical memory used; 5.4 GB of 9.3 GB virtual memory used.</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">对于56G内存的NM来说，如果全部跑map则56/3大约跑18个container</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">假设修改最小分配为默认的1024，则分配的内存为2G，即大约可以跑56/2约28个container。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">通过上述的描述，大概就对其参数有个比较综合的了解了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">文章来源：<a href="https://segmentfault.com/a/1190000003777237" style="font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">https://segmentfault.com/a/1190000003777237</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;"><strong style="box-sizing: border-box;">参考资料</strong></p><p style="box-sizing: border-box; margin-top: 1.5em;"><a href="https://support.pivotal.io/hc/en-us/articles/201462036-Mapreduce-YARN-Memory-Parameters" rel="nofollow noreferrer" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); outline: 0px; border-bottom: 1px solid rgba(0, 154, 97, 0.25); padding-bottom: 1px;">Mapreduce YARN Memory Parameters</a></p></div>